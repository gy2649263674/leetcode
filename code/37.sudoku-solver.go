/*
 * @lc app=leetcode.cn id=37 lang=golang
 * @lcpr version=30204
 *
 * [37] 解数独
 *
 * https://leetcode.cn/problems/sudoku-solver/description/
 *
 * algorithms
 * Hard (68.03%)
 * Likes:    1898
 * Dislikes: 0
 * Total Accepted:    277.5K
 * Total Submissions: 408K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 编写一个程序，通过填充空格来解决数独问题。
 *
 * 数独的解法需 遵循如下规则：
 *
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 *
 *
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 *
 *
 *
 *
 *
 * 示例 1：
 *
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
 *
 * 输出：[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
 * 解释：输入的数独如上图所示，唯一有效的解决方案如下所示：
 *
 *
 *
 *
 *
 *
 * 提示：
 *
 *
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字或者 '.'
 * 题目数据 保证 输入数独仅有一个解
 *
 *
 *
 *
 *
 */

// @lcpr-template-start
package main

import "fmt"

func pp() {
	for _, row := range bb {
		for _, v := range row {
			fmt.Print(string(v), " ")
		}
		println()
	}
	println("\n")
}
func main() {
	ssb := [][]string{{".", ".", "9", "7", "4", "8", ".", ".", "."}, {"7", ".", ".", ".", ".", ".", ".", ".", "."}, {".", "2", ".", "1", ".", "9", ".", ".", "."}, {".", ".", "7", ".", ".", ".", "2", "4", "."}, {".", "6", "4", ".", "1", ".", "5", "9", "."}, {".", "9", "8", ".", ".", ".", "3", ".", "."}, {".", ".", ".", "8", ".", "3", ".", "2", "."}, {".", ".", ".", ".", ".", ".", ".", ".", "6"}, {".", ".", ".", "2", "7", "5", "9", ".", "."}}
	for i, row := range ssb {
		bb[i] = make([]byte, 9)
		for j, v := range row {
			bb[i][j] = byte(v[0])
		}
		println()
	}
	solveSudoku(bb)
	pp()
}

// @lcpr-template-end
// @lc code=start

type pair struct {
	x, y int
}

var bb [][]byte = make([][]byte, 9)
var b [3][3][10]bool
var c [9][10]bool
var r [9][10]bool
var sp []pair

func solveSudoku(board [][]byte) {
	b = [3][3][10]bool{}
	c = [9][10]bool{}
	r = [9][10]bool{}
	bb = board
	sp = []pair{}
	for i, row := range board {
		for j, v := range row {
			if string(board[i][j])[0] != '.' {
				v = byte(v) - byte('0')
				b[i/3][j/3][v] = true
				c[j][v] = true
				r[i][v] = true
			} else {
				sp = append(sp, pair{i, j})
			}
		}
	}
	if len(sp) == 0 {
		return
	}
	ss(0, sp)
}

func ss(ind int, sp []pair) bool {
	// pp()
	if ind >= len(sp) {
		return true
	}
	i, j := sp[ind].x, sp[ind].y
	for v := 1; v <= 9; v++ {
		if b[i/3][j/3][v] == false && c[j][v] == false && r[i][v] == false {
			b[i/3][j/3][v] = true
			c[j][v] = true
			r[i][v] = true
			bb[i][j] = byte(v) + byte('0')
			if ss(ind+1, sp) {
				return true
			}
			b[i/3][j/3][v] = false
			c[j][v] = false
			r[i][v] = false
		}
	}
	return false

}

// @lc code=end

/*
// @lcpr case=start
// [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]\n
// @lcpr case=end
// @lcpr case=start
//[[".",".","9","7","4","8",".",".","."],["7",".",".",".",".",".",".",".","."],[".","2",".","1",".","9",".",".","."],[".",".","7",".",".",".","2","4","."],[".","6","4",".","1",".","5","9","."],[".","9","8",".",".",".","3",".","."],[".",".",".","8",".","3",".","2","."],[".",".",".",".",".",".",".",".","6"],[".",".",".","2","7","5","9",".","."]]\n
// @lcpr case=end

*/
